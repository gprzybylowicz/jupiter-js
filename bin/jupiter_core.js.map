{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "lib/mersenne-twister.js",
    "src/Particle.js",
    "src/util/Color.js",
    "src/util/List.js",
    "src/util/MathUtil.js",
    "src/util/ParticlePool.js",
    "src/util/Point.js",
    "src/util/Random.js"
  ],
  "names": [],
  "mappingslCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "../",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {\n\n/*\n  I've wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace\n  so it's better encapsulated. Now you can have multiple random number generators\n  and they won't stomp all over eachother's state.\n  \n  If you want to use this as a substitute for Math.random(), use the random()\n  method like so:\n  \n  var m = new MersenneTwister();\n  var randomNumber = m.random();\n  \n  You can also call the other genrand_{foo}() methods on the instance.\n\n  If you want to use a specific seed in order to get a repeatable random\n  sequence, pass an integer into the constructor:\n\n  var m = new MersenneTwister(123);\n\n  and that will always produce the same random sequence.\n\n  Sean McCullough (banksean@gmail.com)\n*/\n\n/* \n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n \n   Before using, initialize the state by using init_genrand(seed)  \n   or init_by_array(init_key, key_length).\n \n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.                          \n \n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n \n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n \n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n \n     3. The names of its contributors may not be used to endorse or promote \n        products derived from this software without specific prior written \n        permission.\n \n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n \n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nvar MersenneTwister = function(seed) {\n  if (seed == undefined) {\n    seed = new Date().getTime();\n  } \n  /* Period parameters */  \n  this.N = 624;\n  this.M = 397;\n  this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n  this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n  this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n \n  this.mt = new Array(this.N); /* the array for the state vector */\n  this.mti=this.N+1; /* mti==N+1 means mt[N] is not initialized */\n\n  this.init_genrand(seed);\n}  \n \n/* initializes mt[N] with a seed */\nMersenneTwister.prototype.init_genrand = function(s) {\n  this.mt[0] = s >>> 0;\n  for (this.mti=1; this.mti<this.N; this.mti++) {\n      var s = this.mt[this.mti-1] ^ (this.mt[this.mti-1] >>> 30);\n   this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n  + this.mti;\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array mt[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.mt[this.mti] >>>= 0;\n      /* for >32 bit machines */\n  }\n}\n \n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nMersenneTwister.prototype.init_by_array = function(init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i=1; j=0;\n  k = (this.N>key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30)\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n      + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n    if (j>=key_length) j=0;\n  }\n  for (k=this.N-1; k; k--) {\n    var s = this.mt[i-1] ^ (this.mt[i-1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941))\n      - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i>=this.N) { this.mt[0] = this.mt[this.N-1]; i=1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */ \n}\n \n/* generates a random number on [0,0xffffffff]-interval */\nMersenneTwister.prototype.genrand_int32 = function() {\n  var y;\n  var mag01 = new Array(0x0, this.MATRIX_A);\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti == this.N+1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk=0;kk<this.N-this.M;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (;kk<this.N-1;kk++) {\n      y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk+1]&this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk+(this.M-this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N-1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);\n    this.mt[this.N-1] = this.mt[this.M-1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n}\n \n/* generates a random number on [0,0x7fffffff]-interval */\nMersenneTwister.prototype.genrand_int31 = function() {\n  return (this.genrand_int32()>>>1);\n}\n \n/* generates a random number on [0,1]-real-interval */\nMersenneTwister.prototype.genrand_real1 = function() {\n  return this.genrand_int32()*(1.0/4294967295.0); \n  /* divided by 2^32-1 */ \n}\n\n/* generates a random number on [0,1)-real-interval */\nMersenneTwister.prototype.random = function() {\n  return this.genrand_int32()*(1.0/4294967296.0); \n  /* divided by 2^32 */\n}\n \n/* generates a random number on (0,1)-real-interval */\nMersenneTwister.prototype.genrand_real3 = function() {\n  return (this.genrand_int32() + 0.5)*(1.0/4294967296.0); \n  /* divided by 2^32 */\n}\n \n/* generates a random number on [0,1) with 53-bit resolution*/\nMersenneTwister.prototype.genrand_res53 = function() { \n  var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6; \n  return(a*67108864.0+b)*(1.0/9007199254740992.0); \n} \n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n; browserify_shim__define__module__export__(typeof MersenneTwister != \"undefined\" ? MersenneTwister : window.MersenneTwister);\n\n}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });\n",
    "var Point = require(\"util/Point\");\nvar Color = require(\"util/Color\");\n\nParticle._UID = Particle._UID || {value: 0};\n\nfunction Particle() {\n\tthis.next = null;\n\tthis.prev = null;\n\n\tthis.uid = Particle._UID.value++;\n\n\tthis.maxLifeTime = 0;\n\tthis.lifeTime = 0;\n\tthis.lifeProgress = 0;\n\n\tthis.position = new Point();\n\tthis.acceleration = new Point();\n\tthis.velocity = new Point();\n\n\tthis.size = new Point(1, 1);\n\tthis.sizeStart = new Point();\n\tthis.sizeEnd = new Point();\n\n\n\tthis.color = new Color(255, 255, 255, 1);\n\tthis.colorStart = new Color();\n\tthis.colorEnd = new Color();\n}\n\nParticle.prototype.isDead = function() {\n\treturn this.lifeTime >= this.maxLifeTime;\n};\n\nmodule.exports = Particle;\n",
    "var MathUtil = require(\"util/MathUtil\");\n\nfunction Color(r, g, b, alpha) {\n\tthis.r = r || 0;\n\tthis.g = g || 0;\n\tthis.b = b || 0;\n\tthis.alpha = alpha || 0;\n}\n\nColor.prototype.copyFrom = function(color) {\n\tthis.r = color.r;\n\tthis.g = color.g;\n\tthis.b = color.b;\n\tthis.alpha = color.alpha;\n};\n\nColor.prototype.add = function(color) {\n\tthis.r += color.r;\n\tthis.g += color.g;\n\tthis.b += color.b;\n\tthis.alpha += color.alpha;\n};\n\nColor.prototype.set = function(r,g,b,a) {\n\tthis.r = r || 0;\n\tthis.g = g || 0;\n\tthis.b = b || 0;\n\tthis.alpha = a || 0;\n};\n\nObject.defineProperty(Color.prototype, \"hex\", {\n\tget: function() {\n\t\tvar hex = this.r << 16;\n\t\thex = hex | this.g << 8;\n\t\thex = hex | this.b;\n\t\treturn hex;\n\t},\n\tset: function(value) {\n\t\tthis.r = (value & 0xFF0000) >> 16;\n\t\tthis.g = (value & 0xFF00) >> 8;\n\t\tthis.b = (value & 0xFF);\n\t}\n});\n\nObject.defineProperty(Color.prototype, \"r\", {\n\tget: function() {\n\t\treturn this._r;\n\t},\n\tset: function(value) {\n\t\tthis._r = MathUtil.clamp(value, 0, 255);\n\t}\n});\n\nObject.defineProperty(Color.prototype, \"g\", {\n\tget: function() {\n\t\treturn this._g;\n\t},\n\tset: function(value) {\n\t\tthis._g = MathUtil.clamp(value, 0, 255);\n\t}\n});\n\nObject.defineProperty(Color.prototype, \"b\", {\n\tget: function() {\n\t\treturn this._b;\n\t},\n\tset: function(value) {\n\t\tthis._b = MathUtil.clamp(value, 0, 255);\n\t}\n});\n\n\nObject.defineProperty(Color.prototype, \"alpha\", {\n\tget: function() {\n\t\treturn this._alpha;\n\t},\n\tset: function(value) {\n\t\tthis._alpha = MathUtil.clamp(value, 0, 1);\n\t}\n});\n\nmodule.exports = Color;",
    "function List() {\n\tthis.first = null;\n\tthis.length = 0;\n}\n\nList.prototype.isEmpty = function() {\n\treturn this.first === null;\n};\n\nList.prototype.add = function(item) {\n\titem.prev = null;\n\titem.next = null;\n\tif (this.first) {\n\t\tthis.first.prev = item;\n\t}\n\n\titem.next = this.first;\n\tthis.first = item;\n\tthis.length++;\n\treturn item;\n};\n\nList.prototype.forEach = function(callback) {\n\tvar current = this.first;\n\tvar next = null;\n\twhile (current) {\n\t\tnext = current.next;\n\t\tcallback(current);\n\t\tcurrent = next;\n\t}\n};\n\nList.prototype.remove = function(item) {\n\tvar previous = item.prev;\n\tvar next = item.next;\n\n\tif (previous)\n\t\tprevious.next = next;\n\n\tif (next)\n\t\tnext.prev = previous;\n\n\tif (this.first === item)\n\t\tthis.first = item.next;\n\n\titem.prev = null;\n\titem.next = null;\n\tthis.length--;\n};\n\nmodule.exports = List;\n",
    "function MathUtil() {\n}\n\nMathUtil.EPSILON = 2.220446049250313e-16;\n\nMathUtil.clamp = function(value, min, max) {\n\treturn Math.max(min, Math.min(value, max));\n};\n\nMathUtil.areEqual = function(a, b) {\n\treturn Math.abs(a - b) < MathUtil.EPSILON;\n};\n\nmodule.exports = MathUtil;",
    "var Particle = require(\"Particle\");\n\nParticlePool.global = new ParticlePool();\n\nfunction ParticlePool() {\n\tthis.first = null;\n}\n\nParticlePool.prototype.pop = function() {\n\tif (!this.first)\n\t\treturn this.create();\n\n\tvar current = this.first;\n\tthis.first = current.next;\n\tcurrent.next = null;\n\treturn current;\n};\n\nParticlePool.prototype.create = function() {\n\treturn new Particle();\n};\n\nParticlePool.prototype.push = function(particle) {\n\tparticle.next = this.first;\n\tthis.first = particle;\n};\n\nmodule.exports = ParticlePool;",
    "\nfunction Point(x, y) {\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n}\n\nPoint.prototype.set = function(x, y) {\n\tthis.x = x;\n\tthis.y = y === undefined ? this.y : y;\n\treturn this;\n};\n\nPoint.prototype.copyFrom = function(point) {\n\tthis.x = point.x;\n\tthis.y = point.y;\n\treturn this;\n};\n\nPoint.prototype.multiplayByScalar = function(scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\nPoint.prototype.add = function(point) {\n\tthis.x += point.x;\n\tthis.y += point.y;\n\treturn this;\n};\n\nmodule.exports = Point;",
    "var MersenneTwister = require(\"MersenneTwister\");\n\nRandom.marsenneTwister = new MersenneTwister();\nfunction Random() {\n}\n\nRandom.get = function() {\n\treturn Random.uniform(0.0, 1.0);\n};\n\nRandom.uniform = function(min, max) {\n\treturn Random.marsenneTwister.genrand_real1() * (max - min) + min; // jshint ignore:line\n};\n\nmodule.exports = Random;\n"
  ]
}